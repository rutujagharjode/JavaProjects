package pkgHibernate;

import java.util.List;
import java.util.Scanner;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

public class EmployeeMainClass {
    private static SessionFactory sessionFactory;
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        sessionFactory = HibernateUtil.getSessionFactory();
        int choice;

        do {
            System.out.println("\n****** CRUD Operations Menu ******");
            System.out.println("1. Insert a new Employee");
            System.out.println("2. Update an existing Employee based on ID");
            System.out.println("3. Delete an Employee based on ID");
            System.out.println("4. Display the List of Employees");
            System.out.println("5. Search for an Employee based on ID");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    insertEmployee();
                    break;
                case 2:
                    updateEmployee();
                    break;
                case 3:
                    deleteEmployee();
                    break;
                case 4:
                    displayEmployees();
                    break;
                case 5:
                    searchEmployee();
                    break;
                case 6:
                    System.out.println("Exiting the program. Goodbye!");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 6);

        sessionFactory.close();
        scanner.close();
    }

    private static void insertEmployee() {
        System.out.println("Enter employee details:");
        System.out.print("Name: ");
        String empName = scanner.nextLine();
        System.out.print("Salary: ");
        double empSal = scanner.nextDouble();
        System.out.print("Age: ");
        int empAge = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character
        System.out.print("Company Name: ");
        String compName = scanner.nextLine();

        if (empSal < 0 || empAge < 0) {
            System.out.println("Salary and age cannot be negative!");
            return;
        }

        Session session = sessionFactory.openSession();
        Transaction transaction = null;

        try {
            // Check if employee ID already exists
            Employee existingEmployee = session.createQuery("FROM Employee WHERE empId = :id", Employee.class)
                    .setParameter("id", empId)
                    .uniqueResult();
            if (existingEmployee != null) {
                System.out.println("Employee with the same ID already exists!");
                return;
            }

            Employee employee = new Employee(empName, empSal, empAge, compName);

            transaction = session.beginTransaction();
            session.persist(employee);
            transaction.commit();
            System.out.println("Employee inserted successfully!");
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
    }

    private static void updateEmployee() {
        System.out.println("\n***** Update Employee *****");
        System.out.print("Enter employee ID: ");
        int empId = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        Session session = sessionFactory.openSession();
        Transaction transaction = null;

        try {
            Employee employee = session.get(Employee.class, empId);
            if (employee == null) {
                System.out.println("Employee not found with ID: " + empId);
                return;
            }

            System.out.println("Old Information:");
            System.out.println(employee);

            System.out.print("Enter new employee name: ");
            String newEmpName = scanner.nextLine();
            System.out.print("Enter new employee salary: ");
            double newEmpSal = scanner.nextDouble();
            System.out.print("Enter new employee age: ");
            int newEmpAge = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character
            System.out.print("Enter new company name: ");
            String newCompName = scanner.nextLine();

            if (newEmpSal < 0 || newEmpAge < 0) {
                System.out.println("Salary and age cannot be negative!");
                return;
            }

            employee.setEmpName(newEmpName);
            employee.setEmpSal(newEmpSal);
            employee.setEmpAge(newEmpAge);
            employee.setCompName(newCompName);

            transaction = session.beginTransaction();
            session.update(employee);
            transaction.commit();
            System.out.println("Employee updated successfully!");
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            System.out.println("Failed to update employee. Error: " + e.getMessage());
        } finally {
            session.close();
        }
    }

    private static void deleteEmployee() {
        System.out.println("\n***** Delete Employee *****");
        System.out.print("Enter employee ID: ");
        int empId = scanner.nextInt();

        Session session = sessionFactory.openSession();
        Transaction transaction = null;

        try {
            Employee employee = session.get(Employee.class, empId);
            if (employee == null) {
                System.out.println("Employee not found with ID: " + empId);
                return;
            }

            transaction = session.beginTransaction();
            session.delete(employee);
            transaction.commit();
            System.out.println("Employee deleted successfully!");
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            System.out.println("Failed to delete employee. Error: " + e.getMessage());
        } finally {
            session.close();
        }
    }

    private static void displayEmployees() {
        System.out.println("\n***** List of Employees *****");

        Session session = sessionFactory.openSession();
        Transaction transaction = null;

        try {
            transaction = session.beginTransaction();
            List<Employee> employees = session.createQuery("FROM Employee", Employee.class).list();
            for (Employee employee : employees) {
                System.out.println(employee);
            }
            transaction.commit();
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            System.out.println("Failed to retrieve employees. Error: " + e.getMessage());
        } finally {
            session.close();
        }
    }

    private static void searchEmployee() {
        System.out.println("\n***** Search Employee *****");
        System.out.print("Enter employee ID: ");
        int empId = scanner.nextInt();

        Session session = sessionFactory.openSession();
        Transaction transaction = null;

        try {
            Employee employee = session.get(Employee.class, empId);
            if (employee == null) {
                System.out.println("Employee not found with ID: " + empId);
                return;
            }

            System.out.println(employee);
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            System.out.println("Failed to search employee. Error: " + e.getMessage());
        } finally {
            session.close();
        }
    }
}
