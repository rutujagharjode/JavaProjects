
Problem Statement :
WAP in Java using Maps to enter 10 employee (the keys are the empid, the whole employee object is the value)
Map with 10 entries of Employees
Menu driven Prg:
1. Add a new Employee to the map (take input)
2. Display the original list of employees (FCFS)
3. Search for a particular employee according to the empid (Take empid as input)
4. Sort Employee According to Sal (this should not change the original map)
5. Sort Employee According to name (this should not change the original map)
6. exit
Class Employee{ int empid; String name; int sal;}

Code :
package pkgDay7Exercise;
import java.util.*;

class Employee {
    int empid;
    String name;
    int sal;

    public Employee(int empid, String name, int sal) {
        this.empid = empid;
        this.name = name;
        this.sal = sal;
    }

    @Override
    public String toString() {
        return "Employee ID: " + empid + ", Name: " + name + ", Salary: " + sal;
    }
}

public class Day7Exercise {
    public static void main(String[] args) {
        Map<Integer, Employee> employeeMap = new LinkedHashMap<>();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nMenu:");
            System.out.println("1. Add a new Employee to the map");
            System.out.println("2. Display the original list of employees");
            System.out.println("3. Search for a particular employee according to the empid");
            System.out.println("4. Sort Employees According to Salary");
            System.out.println("5. Sort Employees According to Name");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.println("\nEnter employee details:");
                    System.out.print("Employee ID: ");
                    int empId = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character

                    if (employeeMap.containsKey(empId)) {
                        System.out.println("Employee with ID " + empId + " already exists!");
                        break;
                    }

                    // Check if empId is already assigned to an employee
                    boolean isDuplicateId = false;
                    for (Employee employee : employeeMap.values()) {
                        if (employee.empid == empId) {
                            isDuplicateId = true;
                            break;
                        }
                    }

                    if (isDuplicateId) {
                        System.out.println("Employee with ID " + empId + " already exists!");
                        break;
                    }

                    System.out.print("Employee Name: ");
                    String name = scanner.nextLine();
                    System.out.print("Employee Salary: ");
                    int salary = scanner.nextInt();

                    if (salary < 0) {
                        System.out.println("Salary cannot be negative!");
                        break;
                    }

                    Employee newEmployee = new Employee(empId, name, salary);
                    employeeMap.put(empId, newEmployee);
                    System.out.println("Employee added successfully!");
                    break;

                case 2:
                    System.out.println("\nList of Employees:");
                    for (Employee employee : employeeMap.values()) {
                        System.out.println(employee);
                    }
                    break;

                case 3:
                    System.out.print("\nEnter employee ID to search: ");
                    int searchId = scanner.nextInt();

                    Employee foundEmployee = employeeMap.get(searchId);
                    if (foundEmployee != null) {
                        System.out.println("Employee found:");
                        System.out.println(foundEmployee);
                    } else {
                        System.out.println("Employee with ID " + searchId + " not found!");
                    }
                    break;

                case 4:
                    List<Map.Entry<Integer, Employee>> salarySortedEntries = new ArrayList<>(employeeMap.entrySet());
                    Collections.sort(salarySortedEntries, Comparator.comparingInt(entry -> entry.getValue().sal));

                    System.out.println("\nEmployees sorted by Salary:");
                    for (Map.Entry<Integer, Employee> entry : salarySortedEntries) {
                        System.out.println(entry.getValue());
                    }
                    break;

                case 5:
                    List<Map.Entry<Integer, Employee>> nameSortedEntries = new ArrayList<>(employeeMap.entrySet());
                    Collections.sort(nameSortedEntries, Comparator.comparing(entry -> entry.getValue().name));

                    System.out.println("\nEmployees sorted by Name:");
                    for (Map.Entry<Integer, Employee> entry : nameSortedEntries) {
                        System.out.println(entry.getValue());
                    }
                    break;

                case 6:
                    System.out.println("\nExiting program...");
                    scanner.close();
                    System.exit(0);

                default:
                    System.out.println("Invalid choice! Please try again.");
                    break;
            }
        }
    }
}
