Problem Statement day4 Exercise1
Design a class employee:
EmpId 
EmpName
EmpAge
If Empage entered is 
Less than zero, throw an Arithmetic Exception: “Ghosts not allowed in Company”
Less than 18, throw an Arithmetic Exception: “Children not allowed in Company”
Greater than 60, throw an Arithmetic Exception: “Senior Citizens not allowed in Company”
Greater than 200, throw an Arithmetic Exception: “Zombies not allowed in Company”
Else if age is between 18-60, the employee joins the company
Handle the various scenarios in Main.
Show the usage in main


package pkgDay4;

import java.util.Scanner;

class Employee {
    private int empId;
    private String empName;
    private int empAge;

    public Employee(int empId, String empName, int empAge) {
        try {
            if (empAge < 0) {
                throw new ArithmeticException("Ghosts not allowed in Company");
            }
            this.empId = empId;
            this.empName = empName;
            this.empAge = empAge;
            validateAge();
        } catch (ArithmeticException e) {
            System.out.println("Exception: " + e.getMessage());
        }
    }

    public void validateAge() throws ArithmeticException {
        if (empAge < 18 && empAge >= 0) {
            throw new ArithmeticException("Children not allowed in Company");
        } else if (empAge > 60 && empAge<=200) {
            throw new ArithmeticException("Senior Citizens not allowed in Company");
        } else if (empAge > 200) {
            throw new ArithmeticException("Zombies not allowed in Company");
        } else {
            System.out.println("Employee joins the company.");
        }
    }
}

public class ExceptionPracticeProgram {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter employee ID: ");
        int empId = scanner.nextInt();
        scanner.nextLine(); 
        System.out.print("Enter employee name: ");
        String empName = scanner.nextLine();
        System.out.print("Enter employee age: ");
        int empAge = scanner.nextInt();

        Employee employee = new Employee(empId, empName, empAge);

    }
}
--------------------------------------------------------------------------
Day4 Exercise2 
Problem Statment 
Create a class Employee(empId, empName, empAge, empSal)
Create a list for storing emps
None of the emps in the list can have a negative salary
Age is to be validated by class employee:
check Emoployee Age at start of the program in epmloyee constructor 
If Employee Age entered is 
Less than zero, throw an Arithmetic Exception: “Ghosts not allowed in Company”
Less than 18, throw an Arithmetic Exception: “Children not allowed in Company”
Greater than 60, throw an Arithmetic Exception: “Senior Citizens not allowed in Company”
Greater than 200, throw an Arithmetic Exception: “Zombies not allowed in Company”
Else if age is between 18-60, the employee joins the company
For appraisal method, if executed, a single value of percentage should be give to the list so that the list is updated with individual salaries:
Void appraisal(list<Emps> emps, int p){all members of the list should have updated salary}
Provide Menu driven prg for : (take proper input from scanner)
1. Add an Employee
2. Remove an Employee
3. List all Employees
4. List an Employee’s details based on empId
5. Give appraisal
6. exit


//Employee1 Class 
package pkgDay4;
//practice problem day4HW

	public class Employee1 {
	    private int empId;
	    private String empName;
	    private int empAge;
	    private double empSal;

	    public Employee1(int empId, String empName, int empAge, double empSal) {
	        validateAge(empAge);

	        this.empId = empId;
	        this.empName = empName;
	        this.empAge = empAge;
	        this.empSal = empSal;
	    }

	    private void validateAge(int empAge) {
	        if (empAge < 0) {
	            throw new ArithmeticException("Ghosts not allowed in Company");
	        } else if (empAge < 18 && empAge >= 0) {
	            throw new ArithmeticException("Children not allowed in Company");
	        } else if (empAge > 60 && empAge<=200) {
	            throw new ArithmeticException("Senior Citizens not allowed in Company");
	        } else if (empAge > 200) {
	            throw new ArithmeticException("Zombies not allowed in Company");
	        }
	        else {
	            System.out.println("Employee joins the company.");
	        }
	    }
	    
	    public int getEmpId() {
	        return empId;
	    }

	    public String getEmpName() {
	        return empName;
	    }

	    public int getEmpAge() {
	        return empAge;
	    }

	    public double getEmpSal() {
	        return empSal;
	    }

	    public void setEmpSal(double empSal) {
	        if (empSal < 0) {
	            throw new ArithmeticException("Salary cannot be negative");
	        }
	        this.empSal = empSal;
	    }
	}

//Employee1Main Class

package pkgDay4;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

//practice problem day4HW
public class Employee1Main {
    private static List<Employee1> employees = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        int choice;

        do {
            System.out.println("\nMenu:");
            System.out.println("1. Add an Employee");
            System.out.println("2. Remove an Employee");
            System.out.println("3. List all Employees");
            System.out.println("4. List an Employee's details based on empId");
            System.out.println("5. Give appraisal");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");

            choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    addEmployee();
                    break;
                case 2:
                    removeEmployee();
                    break;
                case 3:
                    listAllEmployees();
                    break;
                case 4:
                    listEmployeeDetails();
                    break;
                case 5:
                    giveAppraisal();
                    break;
                case 6:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Try again.");
                    break;
            }
        } while (choice != 6);
    }

    private static void addEmployee() {
        try {
            System.out.print("\nEnter employee ID: ");
            int empId = scanner.nextInt();
            scanner.nextLine(); 

            System.out.print("Enter employee name: ");
            String empName = scanner.nextLine();

            System.out.print("Enter employee age: ");
            int empAge = scanner.nextInt();
            scanner.nextLine(); 

            System.out.print("Enter employee salary: ");
            double empSal = scanner.nextDouble();
            scanner.nextLine(); 
            if (empSal < 0) {
                throw new ArithmeticException("Salary cannot be negative");
            }

            Employee1 employee = new Employee1(empId, empName, empAge, empSal);
            employees.add(employee);
            System.out.println("Employee added successfully.");
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please try again.");
            scanner.nextLine(); 
        } catch (ArithmeticException e) {
            System.out.println(e.getMessage());
        }
    }

    private static void removeEmployee() {
        System.out.print("\nEnter the employee ID to remove: ");
        int empId = scanner.nextInt();
        scanner.nextLine(); 

        boolean removed = false;
        for (Employee1 employee : employees) {
            if (employee.getEmpId() == empId) {
                employees.remove(employee);
                removed = true;
                System.out.println("Employee removed successfully.");
                break;
            }
        }

        if (!removed) {
            System.out.println("Employee with ID " + empId + " not found.");
        }
    }

    private static void listAllEmployees() {
        if (employees.isEmpty()) {
            System.out.println("\nNo employees found.");
        } else {
            System.out.println("\nEmployee List:");
            for (Employee1 employee : employees) {
                System.out.println("Employee ID: " + employee.getEmpId());
                System.out.println("Employee Name: " + employee.getEmpName());
                System.out.println("Employee Age: " + employee.getEmpAge());
                System.out.println("Employee Salary: " + employee.getEmpSal());
                System.out.println();
            }
        }
    }

    private static void listEmployeeDetails() {
        System.out.print("\nEnter the employee ID to view details: ");
        int empId = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        boolean found = false;
        for (Employee1 employee : employees) {
            if (employee.getEmpId() == empId) {
                System.out.println("\nEmployee Details:");
                System.out.println("Employee ID: " + employee.getEmpId());
                System.out.println("Employee Name: " + employee.getEmpName());
                System.out.println("Employee Age: " + employee.getEmpAge());
                System.out.println("Employee Salary: " + employee.getEmpSal());
                found = true;
                break;
            }
        }

        if (!found) {
            System.out.println("Employee with ID " + empId + " not found.");
        }
    }

    private static void giveAppraisal() {
        try {
            System.out.print("\nEnter appraisal percentage: ");
            int percentage = scanner.nextInt();
            scanner.nextLine(); 

            for (Employee1 employee : employees) {
                double updatedSalary = employee.getEmpSal() + (employee.getEmpSal() * percentage / 100);
                employee.setEmpSal(updatedSalary);
            }

            System.out.println("Appraisal applied successfully.");
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please try again.");
            scanner.nextLine(); 
        } catch (ArithmeticException e) {
            System.out.println(e.getMessage());
        }
    }
}








